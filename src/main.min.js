'use strict';
import { nanoid } from 'https://cdn.jsdelivr.net/npm/nanoid/nanoid.js';

const body = document.body;
const mobilePopup = document.querySelector('.mobile-popup');
const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--temp');
const inputElevation = document.querySelector('.form__input--climb');
const sidebar = document.querySelector('.sidebar');
const btnTrash = document.querySelector('.btn--trash');
const mapContainerById = document.querySelector('#map');
const btnBack = document.querySelector('.btn-back');
const formInput = document.querySelectorAll('.form__input');
const distanceInput = document.querySelector('.form__input--distance');
const durationInput = document.querySelector('.form__input--duration');
const tempInput = document.querySelector('.form__input--temp');
const climbInput = document.querySelector('.form__input--climb');
const btnSortDuration = document.querySelector('.btn-sort--duration');
const btnSortDistance = document.querySelector('.btn-sort--distance');
const overlay = document.querySelector('.overlay');
const modalWindow = document.querySelector('.modal-window');
const modalWindowMobileText = document.querySelector('.text--mobile');
const modalWindowDesktopText = document.querySelector('.text--desktop');
const modalInfoWorkout = document.querySelector('.info-workout');
const btnCloseInfoWorkout = document.querySelector('.btn-close-edit-Workout');
const editForm = document.querySelector('.edit-form');
const editDistance = document.querySelector('.edit__distance');
const editDuration = document.querySelector('.edit__duration');
const editTemp = document.querySelector('.edit__temp');
const editClimb = document.querySelector('.edit__climb');
const editType = document.querySelector('.edit__type');
const cityName = document.querySelector('.city');
const btnCloseHelpModal = document.querySelector('.btn-close-help');
const btnOpeHelpModal = document.querySelector('.btn__help');
const modalHelp = document.querySelector('.help_modal');
const temperatureContainer = document.querySelector('.temp');
const allInputs = document.querySelectorAll('input');

class App {
  #mapEvent;
  #map;
  #workouts = [];

  constructor() {
    this.click = 0;
    this.timeOut = 0;
    this.distanceSort = 0;
    this.durationSort = 0;
    //this._reset();
    this._getPosition();
    form.addEventListener('submit', this._newWorkout.bind(this));
    sidebar.addEventListener('click', this._hideWorkoutForm.bind(this));
    inputType.addEventListener('change', function () {
      inputCadence.parentElement.classList.toggle('form__row--hidden');
      inputElevation.parentElement.classList.toggle('form__row--hidden');
    });
    editType.addEventListener('change', function () {
      editTemp.closest('.form__row').classList.toggle('form__row--hidden');
      editClimb.closest('.form__row').classList.toggle('form__row--hidden');
    });
    containerWorkouts.addEventListener('click', this._moveToWorkout.bind(this));
    this._getLocalStorageData();
    btnTrash.addEventListener('click', this._deleteAllWorkouts.bind(this));
    btnBack.addEventListener('click', this._hideWorkoutFormMobile.bind(this));
    btnSortDistance.addEventListener(
      'click',
      this._sortDataDistance.bind(this)
    );
    btnSortDuration.addEventListener(
      'click',
      this._sortDataDuration.bind(this)
    );
    btnCloseInfoWorkout.addEventListener(
      'click',
      this._closeModalWindow.bind(this, modalInfoWorkout)
    );
    overlay.addEventListener('click', function () {
      app._closeModalWindow(modalInfoWorkout);
      app._closeModalWindow(modalHelp);
    });

    document.addEventListener('keydown', function (e) {
      if (e.key === 'Escape') {
        app._closeModalWindow(modalInfoWorkout);
        app._closeModalWindow(modalHelp);
      }
    });
    btnOpeHelpModal.addEventListener(
      'click',
      this._showModal.bind(this, modalHelp)
    );
    btnCloseHelpModal.addEventListener(
      'click',
      this._closeModalWindow.bind(this, modalHelp)
    );
    allInputs.forEach(input => {
      input.addEventListener('blur', function () {
        if (!input.validity.valid) {
          return input.reportValidity();
        }

        if (input.value.trim().length === 0) {
          input.setCustomValidity('Заполните это поле.');
          input.reportValidity();
        }
      });

      input.addEventListener('input', function () {
        if (input.value.trim().length > 0) {
          input.setCustomValidity('');
        }
      });
    });
  }

  async _getWeatherAPI(lng, lat, workout) {
    const answer = await fetch(
      `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lng}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m`
    );
    const data = await answer.json();
    const currentTemp = data.current.temperature_2m;
    const index = this.#workouts.findIndex(work => work === workout);
    this.#workouts[index].temperature = currentTemp;
  }

  async _getCoordinateAPI(lng, lat, workout) {
    try {
      const answer = await fetch(
        `https://geocode-maps.yandex.ru/1.x/?apikey=4ada92ff-840e-41e0-aa45-c7bd1b163e52&geocode=${lng},${lat}&format=json`
      );
      const data = await answer.json();
      const currentLocation =
        data.response.GeoObjectCollection.featureMember[0].GeoObject
          .metaDataProperty.GeocoderMetaData.text;
      const index = this.#workouts.findIndex(work => work === workout);
      this.#workouts[index].geolocation = currentLocation;
    } catch {
      console.error(`Can't load data`);
    }
  }

  _getPosition() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        this._errorLoadMap
      );
    } else {
      alert(
        'Данный браузер или устройство не поддерживает геолокацию. Пожалуйста, попробуйте воспользоваться приложением на другом бразуре.'
      );
    }
  }

  _errorLoadMap() {
    if (document.documentElement.scrollWidth > 1200) {
      modalWindowMobileText.style.display = 'none';
      modalWindowDesktopText.style.display = 'block';
    } else {
      modalWindowMobileText.style.display = 'block';
      modalWindowDesktopText.style.display = 'none';
    }
    modalWindow.style.display = 'block';
    overlay.style.display = 'block';
  }

  _loadMap(position) {
    const { latitude, longitude } = position.coords;
    this.#map = L.map('map').setView([latitude, longitude], 13);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);
    this.#map.on('click', this._showForm.bind(this));
    this.#workouts.forEach(workout => this._showPoint(workout));
  }

  _showForm(e) {
    if (document.documentElement.scrollWidth <= 767.9) {
      mapContainerById.style.display = 'none';
      sidebar.style.display = 'flex';
      mobilePopup.style.display = 'none';
    }

    this.#mapEvent = e;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _hideForm() {
    form.classList.add('hidden');
  }

  _newWorkout(e) {
    e.preventDefault();
    inputCadence.classList.remove('form__row--hidden');
    inputElevation.classList.remove('form__row--hidden');
    const { lat, lng } = this.#mapEvent.latlng;
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const cadence = +inputCadence.value;
    const elevation = +inputElevation.value;
    let workout;

    if (type === 'running' && inputCadence.value.trim().length === 0) {
      inputCadence.setCustomValidity('Заполните это поле.');
      return inputCadence.reportValidity();
    }

    if (type === 'cycling' && !inputElevation.value.trim().length === 0) {
      inputElevation.setCustomValidity('Заполните это поле.');
      return inputElevation.reportValidity();
    }

    type === 'running'
      ? (workout = new Running(
          distance,
          duration,
          [lat, lng],
          undefined,
          undefined,
          cadence
        ))
      : (workout = new Cycling(
          distance,
          duration,
          [lat, lng],
          undefined,
          undefined,
          elevation
        ));

    self = this;
    (async function () {
      await self._getWeatherAPI(lng, lat, workout);
      await self._getCoordinateAPI(lng, lat, workout);
      self._addWorkoutsToLocalStorage.call(self);
    })();
    this.#workouts.push(workout);
    this._showPoint(workout);
    //this._addWorkoutsToLocalStorage.call(this);
    this._displayWorkoutToSidebar(workout);
    this._hideForm();
  }

  _showPoint(workout) {
    // CUSTOM ICON OF THE POPUP
    // const LeafIcon = L.Icon.extend({
    //   options: {
    //     iconSize: [64, 64],
    //     shadowSize: [51, 37],
    //     iconAnchor: [32, 37],
    //     shadowAnchor: [16, 37],
    //     popupAnchor: [0, -30],
    //   },
    // });
    // const icon = new LeafIcon({ iconUrl: './popup-img.png' });
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';

    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          content: `${workout.type === 'running' ? '🏃' : '🚵‍♂️'} ${
            workout.date
          }`,
          maxWidth: 110,
          maxHeight: 30,
          autoClose: false,
          className: `${workout.type}-popup`,
          closeOnClick: false,
        })
      )
      .openPopup();
  }

  _displayWorkoutToSidebar(workout) {
    const html = `<li class="workout workout--running" data-id="${workout._id}">
          <h2 class="workout__title">${
            workout.type === 'running' ? 'Пробежка' : 'Велотренировка'
          } ${workout.date}</h2>
          <button class="btn-workout-edit"><span class="visually-hidden">Изменить данные тренировки</span></button>
          <div class="workout__details">
            <span class="workout__icon">${
              workout.type === 'running' ? '🏃' : '🚵‍♂️'
            }</span>
            <span class="workout__value">${+workout.distance.toFixed(2)}</span>
            <span class="workout__unit">км</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">⌚</span>
            <span class="workout__value">${Math.round(workout.duration)}</span>
            <span class="workout__unit">мин</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">📏</span>
            <span class="workout__value">${
              workout.type === 'running'
                ? `${+workout.pace.toFixed(2)}`
                : `${+workout.speed.toFixed(2)}`
            }</span>
            <span class="workout__unit">${
              workout.type === 'running' ? 'мин/км' : 'км/ч'
            }</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">${
              workout.type === 'running' ? '⏱' : '🏔'
            }</span>
            <span class="workout__value">${
              workout.type === 'running'
                ? `${Math.round(workout.temp)}`
                : `${Math.round(workout.climb)}`
            }</span>
            <span class="workout__unit">${
              workout.type === 'running' ? 'шаг/мин' : 'м'
            }</span>
          </div>
        </li>`;
    form.insertAdjacentHTML('afterend', html);
  }

  _moveToWorkout(e) {
    const workoutELement = e.target.closest('.workout');
    const workoutEditElement = e.target.closest('.btn-workout-edit');
    if (workoutEditElement) {
      self = this;
      return (function () {
        self._showModal(modalInfoWorkout);
        self._loadDataEditForm.call(self, workoutELement.dataset.id);
      })();
    }
    if (!workoutELement) return;
    this.click++;
    this.timeOut;
    if (this.click === 1) {
      this.timeOut = setTimeout(() => {
        if (document.documentElement.scrollWidth <= 767.9)
          return (this.click = 0);
        const workout = this.#workouts.find(
          item => item._id == workoutELement.dataset.id
        );
        workout.click();
        this.#map.setView(workout.coords, 13, {
          animate: true,
          pan: {
            duration: 1,
          },
        });
        this.click = 0;
      }, 200);
    } else {
      this.click = 0;
      clearTimeout(this.timeOut);
      this._deleteWorkout.call(this, e);
    }
  }

  _addWorkoutsToLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this.#workouts));
  }

  _getLocalStorageData() {
    const localData = JSON.parse(localStorage.getItem('workouts'));
    if (!localData) return;
    localData.forEach(data => {
      if (data.type === 'running') {
        this.#workouts.push(
          new Running(
            data.distance,
            data.duration,
            data.coords,
            data.geolocation,
            data.temperature,
            data.temp
          )
        );
      }
      if (data.type === 'cycling') {
        this.#workouts.push(
          new Cycling(
            data.distance,
            data.duration,
            data.coords,
            data.geolocation,
            data.temperature,
            data.climb
          )
        );
      }
    });

    this.#workouts.forEach(work => this._displayWorkoutToSidebar(work));
  }

  _reset() {
    localStorage.removeItem('workouts');
  }

  _deleteWorkout(e) {
    const workoutELement = e.target.closest('.workout');
    if (!workoutELement) return;
    const workoutIndex = this.#workouts.findIndex(
      item => item._id == workoutELement.dataset.id
    );
    this.#workouts.splice(workoutIndex, 1);
    this._reset();
    workoutELement.remove();
    this._addWorkoutsToLocalStorage();
    if (document.documentElement.scrollWidth <= 767.9) return;
    location.reload();
  }

  _deleteWorkoutPoint(workout) {}

  _clearAll(elements) {
    elements.forEach(el => el.remove());
  }

  _hideWorkoutForm(e) {
    if (document.documentElement.scrollWidth <= 767.9) return;
    if (
      e.target.classList.contains('sidebar') ||
      e.target.classList.contains('workouts') ||
      e.target.classList.contains('footer__copyright') ||
      e.target.classList.contains('icon')
    ) {
      form.classList.add('hidden');
    } else {
      return;
    }
  }

  _hideWorkoutFormMobile(e) {
    mapContainerById.style.display = 'block';
    sidebar.style.display = 'none';
    mobilePopup.style.display = 'block';
    location.reload();
  }

  _deleteAllWorkouts() {
    this._reset();
    location.reload();
  }

  _sortDataDistance() {
    this.distanceSort++;
    btnSortDuration.classList.remove('btn-sort--down', 'btn-sort--up');
    btnSortDistance.classList.remove('btn-sort--down', 'btn-sort--up');
    if (this.distanceSort === 3) {
      this._clearWorkoutsList();
      this.#workouts.forEach(work => this._displayWorkoutToSidebar(work));
      return (this.distanceSort = 0);
    }
    const sortArr = this.#workouts.slice();
    if (this.distanceSort === 1) {
      sortArr.sort((x, y) => x.distance - y.distance);
      btnSortDistance.classList.add('btn-sort--up');
    }
    if (this.distanceSort === 2) {
      sortArr.sort((x, y) => y.distance - x.distance);
      btnSortDistance.classList.add('btn-sort--down');
    }
    this._clearWorkoutsList();
    sortArr.forEach(work => this._displayWorkoutToSidebar(work));
  }

  _sortDataDuration() {
    this.durationSort++;
    btnSortDuration.classList.remove('btn-sort--down', 'btn-sort--up');
    btnSortDistance.classList.remove('btn-sort--down', 'btn-sort--up');
    if (this.durationSort === 3) {
      this._clearWorkoutsList();
      this.#workouts.forEach(work => this._displayWorkoutToSidebar(work));
      return (this.durationSort = 0);
    }
    const sortArr = this.#workouts.slice();
    if (this.durationSort === 1) {
      sortArr.sort((x, y) => x.duration - y.duration);
      btnSortDuration.classList.add('btn-sort--up');
    }
    if (this.durationSort === 2) {
      sortArr.sort((x, y) => y.duration - x.duration);
      btnSortDuration.classList.add('btn-sort--down');
    }
    this._clearWorkoutsList();
    sortArr.forEach(work => this._displayWorkoutToSidebar(work));
  }

  _clearWorkoutsList() {
    while (containerWorkouts.children.length > 1) {
      containerWorkouts.removeChild(containerWorkouts.lastElementChild);
    }
  }

  _showModal(modal) {
    overlay.style.display = 'block';
    modal.style.display = 'block';
  }

  _closeModalWindow(modal) {
    modal.style.display = 'none';
    overlay.style.display = 'none';
  }

  _loadDataEditForm(id) {
    this._hideForm();
    const currentWorkout = this.#workouts.find(item => item._id === id);
    const index = this.#workouts.findIndex(
      item => item._id === currentWorkout._id
    );

    if (currentWorkout.type === 'running') {
      editTemp.closest('.form__row').classList.remove('form__row--hidden');
      editClimb.closest('.form__row').classList.add('form__row--hidden');
    }
    if (currentWorkout.type === 'cycling') {
      editClimb.closest('.form__row').classList.remove('form__row--hidden');
      editTemp.closest('.form__row').classList.add('form__row--hidden');
    }
    editType.value = currentWorkout.type;
    editDistance.value = currentWorkout.distance;
    editDuration.value = currentWorkout.duration;
    currentWorkout.type === 'running'
      ? (editTemp.value = currentWorkout.temp)
      : (editClimb.value = currentWorkout.climb);
    this._showCity(currentWorkout);
    this._showTemp(currentWorkout);

    editForm.addEventListener('submit', e => {
      e.preventDefault();
      currentWorkout.type = editType.value;
      currentWorkout.distance = +editDistance.value;
      currentWorkout.duration = +editDuration.value;

      if (currentWorkout.type === 'running') {
        Object.setPrototypeOf(currentWorkout, Running.prototype);
        currentWorkout.calculatePace();
        currentWorkout.temp = +editTemp.value;
        if (editTemp.value.trim().length === 0) {
          editTemp.setCustomValidity('Заполните это поле.');
          return editTemp.reportValidity();
        }
        try {
          delete currentWorkout.climb;
        } catch (e) {
          console.log(e);
          this.areChangedPopup.call(this, false);
        }
      }
      if (currentWorkout.type === 'cycling') {
        Object.setPrototypeOf(currentWorkout, Cycling.prototype);
        currentWorkout.calculateSpeed();
        currentWorkout.climb = +editClimb.value;
        if (editClimb.value.trim().length === 0) {
          editClimb.setCustomValidity('Заполните это поле.');
          return editClimb.reportValidity();
        }
        try {
          delete currentWorkout.temp;
        } catch (e) {
          console.log(e);
          this.areChangedPopup.call(this, false);
        }
      }
      return this._editDataWorkout.call(this, index, currentWorkout);
    });
  }

  _showCity(workout) {
    cityName.innerHTML = `<p>Место проведения тренировки: ${workout.geolocation}</p>`;
  }

  _showTemp(workout) {
    temperatureContainer.innerHTML = `<p>Температура в этот момент: ${workout.temperature} С°</p>`;
  }

  _editDataWorkout(index, newWorkout) {
    this.#workouts.splice(index, 1, newWorkout);
    this._clearWorkoutsList();
    this._reset();
    this._addWorkoutsToLocalStorage.call(this);
    this.#workouts.forEach(work => this._displayWorkoutToSidebar(work));
    this.areChangedPopup.call(this, true);
  }

  areChangedPopup(value) {
    const message = document.createElement('div');
    message.classList.add('changes-saved-popup');
    value
      ? (message.innerHTML = `<p>Изменения сохранены!</p>`)
      : (message.innerHTML = `<p>Некорректные данные!</p>`);
    modalInfoWorkout.prepend(message);
    setTimeout(() => {
      message.classList.add('animation-back');
    }, 1500);
    setTimeout(() => {
      message.classList.add('hidden');
    }, 2500);
  }
}

class Workout {
  _id = nanoid();
  clickNumber = 0;

  constructor(
    distance,
    duration,
    coords,
    geolocation = 'Астрахань',
    temperature
  ) {
    this.distance = distance;
    this.duration = duration;
    this.coords = coords;
    this.date = new Intl.DateTimeFormat('ru-RU').format(new Date());
    this.geolocation = geolocation;
    this.temperature = temperature;
  }

  click() {
    this.clickNumber++;
  }
}

class Running extends Workout {
  type = 'running';
  constructor(distance, duration, coords, geolocation, temperature, temp) {
    super(distance, duration, coords, geolocation, temperature);
    this.temp = temp;
    this.calculatePace();
  }
  calculatePace() {
    this.pace = this.duration / this.distance;
  }
}

class Cycling extends Workout {
  type = 'cycling';
  constructor(distance, duration, coords, geolocation, temperature, climb) {
    super(distance, duration, coords, geolocation, temperature);
    this.climb = climb;
    this.calculateSpeed();
  }
  calculateSpeed() {
    this.speed = this.distance / (this.duration / 60);
  }
}

const app = new App();
